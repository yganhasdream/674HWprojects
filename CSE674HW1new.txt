//CSE674 HW1 Yang Gan
//Due: 11:59PM, Wed(9/11)

#include <iostream>
#include <algorithm>    // std::min
using namespace std;



class Node {
public:
	int value;
	Node* next;
	Node(int i) { value = i; next = nullptr; }
	Node() { next = nullptr; }
};

class LinkedList {
public:
	int numNodes;
	Node* head;
	LinkedList() { numNodes = 0; head = nullptr; }
	void makeRandomList(int m, int n);
	void printList();
 

	//Recursively merge sort i numbers starting at node pointed by p
	void mergeSort(Node* &p, int i);//in-place recursive merge sort


	//Merge i1 numbers starting at node pointed by p1 with i2 numbers
	//starting at node pointed by p2
	void merge(Node* &p1, int i1, Node* p2, int i2);
};

void LinkedList::makeRandomList(int m, int n) {

	for (int i = 0; i < m; i++) {
		Node* p1 = new Node(rand() % n);
		p1->next = head;
		head = p1;
		numNodes++;
	}
}

void LinkedList::printList() {
	cout << endl;
	Node* p1 = head;
	while (p1 != nullptr) {
		cout << p1->value << " ";
		p1 = p1->next;
	}
}
void LinkedList::mergeSort(Node* &p, int i) {
	if (p == NULL ||p->next == NULL)
		return ;
	Node* fast = p->next;
	Node* slow = p;
	while (fast != NULL && fast->next != NULL)
	{
		fast = fast->next->next;
		slow = slow->next;
	}
	Node*right = slow->next;
	slow->next = NULL;			
	mergeSort(p, (i+1) / 2);
    mergeSort(right, i / 2);
	merge(p, (i + 1) / 2, right, i / 2);
}
void LinkedList::merge(Node* &p1, int i1, Node* p2, int i2) {
	if (i1 + i2 == 0) return;
	Node* temp;
	if (p1->value <= p2->value) { temp = p1; 
	p1 = p1->next;
	}
	else {
		temp = p2;
		p2 = p2->next;
	}
	Node* dum = temp;
	while (p1!=nullptr&&p2!=nullptr) {
		if (p1->value <= p2->value) {
			temp->next = p1;
			p1 = p1->next; 
			temp = temp->next;
		}
		else{
			temp->next = p2;
				p2 = p2->next;
			temp = temp->next;
		}
	 }

	while (p2 != nullptr) {
		temp->next = p2;
		p2 = p2->next;
		temp = temp->next;
	}

	while  ( p1 != nullptr) {
		temp->next = p1;
		p1 = p1->next;
		temp = temp->next;
	}	
	p1 = dum;
}

int main() {

	LinkedList d1;


	d1.makeRandomList(40, 20);
	d1.printList();

	d1.mergeSort(d1.head, d1.numNodes);
	d1.printList();

	getchar();
	getchar();
	return 0;

}
